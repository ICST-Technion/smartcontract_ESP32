#
#  PRE: if redundant
#
&NAS-IP-Address		:= 127.0.0.1
&Tmp-Integer-0		:= 0x7f000001

&Tmp-String-0			:= &NAS-IP-Address

if ((ipaddr)&Tmp-Integer-0[0] != &NAS-IP-Address) {
	test_fail
}

#
#  Assignments do implicit casts, so we can check cast results are
#  correct, by using the assignment to perform the cast, and looking
#  at the results.
#
&request += {
	&Tmp-Cast-Ipaddr	= 203.0.113.1
	&Tmp-Cast-IPv4Prefix	= 203.0.113.0/24
	&Tmp-Cast-IPv4Prefix	= 203.0.113.1/32
	&Tmp-Cast-IPv6Addr	= 2001:DB8::1
	&Tmp-Cast-IPv6Addr	= ::ffff:203.0.113.1
	&Tmp-Cast-IPv6Prefix	= 2001:DB8::/32
	&Tmp-Cast-IPv6Prefix	= ::ffff:203.0.113.1/128
	&Tmp-Cast-IPv6Prefix	= ::ffff:203.0.113.1/64
}

#
#  IPv4 address to IPv6 address
#
&control.Tmp-Cast-IPv6addr	:= &Tmp-Cast-IPaddr[0]
if (&control.Tmp-Cast-IPv6addr[0] != ::ffff:203.0.113.1) {
	test_fail
}

#
#  IPv6 address to IPv4 address
#
&Tmp-Cast-IPaddr := &control.Tmp-Cast-IPv6addr
if (&control.Tmp-Cast-IPaddr[0] != 203.0.113.1) {
	test_fail
}

#
#  IPv4 prefix to IPv6 prefix
#
&control.Tmp-Cast-IPv6Prefix := &Tmp-Cast-IPv4Prefix[0]
if (&control.Tmp-Cast-IPv6Prefix[0] != ::ffff:203.0.113.0/120) {
	test_fail
}

#
#  IPv6 prefix to IPv4 prefix
#
&control.Tmp-Cast-IPv4Prefix := &control.Tmp-Cast-IPv6Prefix[0]
if (&control.Tmp-Cast-IPv4Prefix[0] != 203.0.113.1/24) {
	test_fail
}

#
#  IPv4 prefix (32) to IPv6 address
#
&control.Tmp-Cast-IPv6Addr := &Tmp-Cast-IPv4Prefix[1]
if (&control.Tmp-Cast-IPv6Addr[0] != ::ffff:203.0.113.1) {
	test_fail
}

#
#  IPv6 prefix (128) to IPv4 address
#
&control.Tmp-Cast-Ipaddr := &Tmp-Cast-IPv6Prefix[1]
if (&control.Tmp-Cast-Ipaddr[0] != 203.0.113.1/32) {
	test_fail
}

#
#  IPv4 address to IPv6 prefix (128)
#
&control.Tmp-Cast-IPv6Prefix := &Tmp-Cast-Ipaddr[0]
if (&control.Tmp-Cast-IPv6Prefix != ::ffff:203.0.113.1/128) {
	test_fail
}

#
#  IPv6 address to IPv4 prefix (32)
#
&control.Tmp-Cast-IPv4Prefix[0] := &Tmp-Cast-IPv6Addr[1]
if (&control.Tmp-Cast-IPv4Prefix != 203.0.113.1/32) {
	test_fail
}

#
#  IPv4 address to IPv4 prefix (32)
#
&control.Tmp-Cast-IPv4Prefix := &Tmp-Cast-Ipaddr[0]
if (&control.Tmp-Cast-IPv4Prefix != 203.0.113.1/32) {
	test_fail
}

#
#  IPv6 address to IPv6 prefix (128)
#
&control.Tmp-Cast-IPv6Prefix := &Tmp-Cast-Ipv6addr[0]
if (&control.Tmp-Cast-IPv6Prefix != 2001:DB8::1/128) {
	test_fail
}

#
#  IPv4 prefix (32) to IPv4 address
#
&control.Tmp-Cast-Ipaddr := &Tmp-Cast-IPv4Prefix[1]
if (&control.Tmp-Cast-Ipaddr != 203.0.113.1) {
	test_fail
}

#
#  IPv6 prefix (128) to IPv6 address
#
&control.Tmp-Cast-IPv6Addr := &Tmp-Cast-IPv6Prefix[1]
if (&control.Tmp-Cast-IPv6Addr != ::ffff:203.0.113.1) {
	test_fail
}

#
#  And the invalid cases...
#

#
#  IPv6 Prefix < 128 to IPv6 address
#
redundant {
	group {
		&control.Tmp-Cast-IPv6Addr := &Tmp-Cast-IPv6Prefix[0]
		fail
	}
	group {
		if (&Module-Failure-Message != 'Assigning value to "Tmp-Cast-ipv6addr" failed: Invalid cast from ipv6prefix to ipv6addr.  Only /128 (not /32) prefixes may be cast to IP address types') {
			test_fail
		}
		&request -= &Module-Failure-Message[*]
		ok
	}
}

#
#  IPv6 Prefix < 128 to IPv4 address
#
redundant {
	group {
		&control.Tmp-Cast-Ipaddr := &Tmp-Cast-IPv6Prefix[2]
		fail
	}
	group {
		if (&Module-Failure-Message != 'Assigning value to "Tmp-Cast-ipaddr" failed: Invalid cast from ipv6prefix to ipaddr.  Only /128 (not /64) prefixes may be cast to IP address types') {
			test_fail
		}
		&request -= &Module-Failure-Message[*]
		ok
	}
}

#
#  IPv6 Prefix < 96 to IPv4 prefix (causes part of the IPv4/v6 mapping prefix to be masked off)
#
redundant {
	group {
		&control.Tmp-Cast-Ipv4Prefix := &Tmp-Cast-IPv6Prefix[2]
		fail
	}
	group {
		if (&Module-Failure-Message != 'Assigning value to "Tmp-Cast-ipv4prefix" failed: Invalid cast from ipv6prefix to ipv4prefix.  No IPv4-IPv6 mapping prefix') {
			test_fail
		}
		&request -= &Module-Failure-Message[*]
		ok
	}
}

#
#  IPv4 Prefix < 32 to IPv6 address
#
redundant {
	group {
		&control.Tmp-Cast-IPv6Addr := &Tmp-Cast-IPv4Prefix[0]
		fail
	}
	group {
		if (&Module-Failure-Message != 'Assigning value to "Tmp-Cast-ipv6addr" failed: Invalid cast from ipv4prefix to ipv6addr.  Only /32 (not /24) prefixes may be cast to IP address types') {
			test_fail
		}
		&request -= &Module-Failure-Message[*]
		ok
	}
}

#
#  IPv4 Prefix < 32 to IPv4 address
#
redundant {
	group {
		&control.Tmp-Cast-Ipaddr := &Tmp-Cast-IPv4Prefix[0]
		fail
	}
	group {
		if (&Module-Failure-Message != 'Assigning value to "Tmp-Cast-ipaddr" failed: Invalid cast from ipv4prefix to ipaddr.  Only /32 (not 24/) prefixes may be cast to IP address types') {
			test_fail
		}
		&request -= &Module-Failure-Message[*]
		ok
	}
}

#
#  IPv6 Prefix outside mapping range to IPv4 address
#
redundant {
	group {
		&control.Tmp-Cast-Ipaddr := &Tmp-Cast-IPv6Prefix[0]
		fail
	}
	group {
		if (&Module-Failure-Message != 'Assigning value to "Tmp-Cast-ipaddr" failed: Invalid cast from ipv6prefix to ipaddr.  Only /128 (not /32) prefixes may be cast to IP address types') {
			test_fail
		}
		&request -= &Module-Failure-Message[*]
		ok
	}
}

#
#  IPv6 Prefix outside mapping range to IPv4 prefix
#
redundant {
	group {
		&control.Tmp-Cast-IPv4Prefix := &Tmp-Cast-IPv6Prefix[0]
		fail
	}
	group {
		if (&Module-Failure-Message != 'Assigning value to "Tmp-Cast-ipv4prefix" failed: Invalid cast from ipv6prefix to ipv4prefix.  No IPv4-IPv6 mapping prefix') {
			test_fail
		}
		&request -= &Module-Failure-Message[*]
		ok
	}
}

#
#  IPv6 Address outside mapping range to IPv4 address
#
redundant {
	group {
		&control.Tmp-Cast-Ipaddr := &Tmp-Cast-IPv6Addr[0]
		fail
	}
	group {
		if (&Module-Failure-Message != 'Assigning value to "Tmp-Cast-ipaddr" failed: Invalid cast from ipv6addr to ipaddr.  No IPv4-IPv6 mapping prefix') {
			test_fail
		}
		&request -= &Module-Failure-Message[*]
		ok
	}
}

#
#  IPv6 Address outside mapping range to IPv4 prefix
#
redundant {
	group {
		&control.Tmp-Cast-IPv4Prefix := &Tmp-Cast-IPv6Addr[0]
		fail
	}
	group {
		if (&Module-Failure-Message != 'Assigning value to "Tmp-Cast-ipv4prefix" failed: Invalid cast from ipv6addr to ipv4prefix.  No IPv4-IPv6 mapping prefix') {
			test_fail
		}
		&request -= &Module-Failure-Message[*]
		ok
	}
}

success
